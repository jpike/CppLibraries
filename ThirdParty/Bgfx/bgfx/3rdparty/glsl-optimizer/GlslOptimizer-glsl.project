// Disable annoying warnings for some parts of this project.
#pragma warning(push)
#pragma warning(disable: 4100)
#pragma warning(disable: 4189)
#pragma warning(disable: 4291)
#pragma warning(disable: 4389)
#pragma warning(disable: 4701)
#pragma warning(disable: 4702)
#pragma warning(disable: 4706)
#pragma warning(disable: 4996)
#pragma warning(disable: 5033)

extern "C"
{
    #include "../util/hash_table.c"
}

#include "ast_array_index.cpp"
#include "ast_expr.cpp"
#include "ast_function.cpp"
#include "ast_to_hir.cpp"
#include "ast_type.cpp"
#include "builtin_functions.cpp"
#include "builtin_types.cpp"
#include "builtin_variables.cpp"
#include "glsl_lexer.cpp"
#include "glsl_optimizer.cpp"
#include "glsl_parser_extras.cpp"
#include "glsl_symbol_table.cpp"
#include "glsl_types.cpp"
#include "ir.cpp"
#include "ir_basic_block.cpp"
#include "ir_builder.cpp"
#include "ir_constant_expression.cpp"
#include "ir_clone.cpp"
#include "ir_equals.cpp"
#include "ir_function.cpp"
#include "ir_function_can_inline.cpp"
#include "ir_function_detect_recursion.cpp"
#include "ir_hierarchical_visitor.cpp"
#include "ir_hv_accept.cpp"
#include "ir_print_glsl_visitor.cpp"
#include "ir_print_metal_visitor.cpp"
#include "ir_print_visitor.cpp"
#include "ir_rvalue_visitor.cpp"
#include "ir_stats.cpp"
#include "ir_unused_structs.cpp"
#include "ir_validate.cpp"
#include "ir_variable_refcount.cpp"
#include "hir_field_selection.cpp"
#include "link_atomics.cpp"
#include "link_functions.cpp"
#include "link_interface_blocks.cpp"
#include "link_uniform_block_active_visitor.cpp"
#include "link_uniform_blocks.cpp"
#include "link_uniform_initializers.cpp"
#include "link_uniforms.cpp"
#include "link_varyings.cpp"
#include "linker.cpp"
#include "loop_analysis.cpp"
#include "loop_controls.cpp"
#include "loop_unroll.cpp"
#include "lower_clip_distance.cpp"
#include "lower_discard_flow.cpp"
#include "lower_instructions.cpp"
#include "lower_jumps.cpp"
#include "lower_named_interface_blocks.cpp"
#include "lower_packed_varyings.cpp"
#include "lower_vec_index_to_swizzle.cpp"
#include "lower_vector_insert.cpp"
#include "lower_vertex_id.cpp"
#include "opt_algebraic.cpp"
#include "opt_array_splitting.cpp"
#include "opt_constant_folding.cpp"
#include "opt_constant_propagation.cpp"
#include "opt_constant_variable.cpp"
#include "opt_copy_propagation.cpp"
#include "opt_copy_propagation_elements.cpp"
#include "opt_cse.cpp"
#include "opt_dead_builtin_variables.cpp"
#include "opt_dead_builtin_varyings.cpp"
#include "opt_dead_code.cpp"
#include "opt_dead_code_local.cpp"
#include "opt_dead_functions.cpp"
#include "opt_flatten_nested_if_blocks.cpp"
#include "opt_flip_matrices.cpp"
#include "opt_function_inlining.cpp"
#include "opt_if_simplification.cpp"
#include "opt_minmax.cpp"
#include "opt_noop_swizzle.cpp"
#include "opt_rebalance_tree.cpp"
#include "opt_redundant_jumps.cpp"
#include "opt_structure_splitting.cpp"
#include "opt_swizzle_swizzle.cpp"
#include "opt_tree_grafting.cpp"
#include "opt_vectorize.cpp"
#include "standalone_scaffolding.cpp"

#pragma warning(pop)

/// @todo   Not sure what this is needed for...but an implementation is needed.
int _mesa_glsl_parse(struct _mesa_glsl_parse_state *)
{
   return -1;
}
